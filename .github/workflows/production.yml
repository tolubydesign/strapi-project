# Documentation
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions

name: Production Build

run-name: Deploy to Main Branch by @${{ github.actor }}

# on: [push]
on:
  push:
    branches:
      - main
      - "releases/**"

env:
  SERVER: production
  AWS_REGION: ${{ secrets.GIT_AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.GIT_ECR_REPOSITORY }}
  ECS_SERVICE: ${{ secrets.GIT_ECS_SERVICE }}
  ECS_CLUSTER: ${{ secrets.GIT_ECS_CLUSTER }}
  ECS_TASK_DEFINITION: ${{ secrets.GIT_ECS_TASK_DEFINITION }}
  CONTAINER_NAME: ${{ secrets.GIT_CONTAINER_NAME }}

# permissions:
#   actions: read|write|none
#   checks: read|write|none
#   contents: read|write|none
#   deployments: read|write|none
#   id-token: read|write|none
#   issues: read|write|none
#   discussions: read|write|none
#   packages: read|write|none
#   pages: read|write|none
#   pull-requests: read|write|none
#   repository-projects: read|write|none
#   security-events: read|write|none
#   statuses: read|write|none
# permissions: read-all|write-all

jobs:
  deploy:
    name: Deploy To AWS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Print Secrets
        id: print-secretes
        run: |
          echo "${{ secrets.GIT_ENV_VARIABLES }}" >> .env

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        id: recreate-task-definition
        run: |
          aws ecs describe-task-definition --task-definition first-run-task-definition --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

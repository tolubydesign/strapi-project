# Documentation
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions

name: Development Build - Deploy to Amazon ECS

run-name: Development Build by @${{ github.actor }}. ID - ${{ inputs.build_id }}

# on: [push]
on:
  push:
    branches:
      - development

env:
  SERVER: development
  
  # set this to your preferred AWS region, e.g. us-west-1
  # AWS_REGION: MY_AWS_REGION
  AWS_REGION: ${{ secrets.GIT_AWS_REGION }}
  
  # set this to your Amazon ECR repository name
  # ECR_REPOSITORY: MY_ECR_REPOSITORY
  ECR_REPOSITORY: ${{ secrets.GIT_ECR_REPOSITORY }}
  
  # set this to your Amazon ECS service name
  # ECS_SERVICE: MY_ECS_SERVICE
  ECS_SERVICE: ${{ secrets.GIT_ECS_SERVICE }}
  
  # set this to your Amazon ECS cluster name
  # ECS_CLUSTER: MY_ECS_CLUSTER
  ECS_CLUSTER: ${{ secrets.GIT_ECS_CLUSTER }}
  
  # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  # ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION
  ECS_TASK_DEFINITION: ${{ secrets.GIT_ECS_TASK_DEFINITION }}
  
  # set this to the name of the container in the
  # containerDefinitions section of your task definition
  # CONTAINER_NAME: MY_CONTAINER_NAME
  CONTAINER_NAME: ${{ secrets.GIT_CONTAINER_NAME }}

jobs:
  build:
    name: Build Website
    runs-on: ubuntu-latest

    steps:
      - name: Environmental variables
        env:
          MY_VAR: Hi there! My name is
          FIRST_NAME: Mona
          MIDDLE_NAME: The
          LAST_NAME: Octocat
        run: |
          echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "14"
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      #  https://github.com/actions/cache/blob/main/examples.md#node---npm
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v3
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm i

      - name: Build Project
        run: npm run build
        
      # https://aws.amazon.com/blogs/containers/create-a-ci-cd-pipeline-for-amazon-ecs-with-github-actions-and-aws-codebuild-tests/

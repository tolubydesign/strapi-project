# Documentation
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions

name: Development Build - Deploy to Amazon ECS

run-name: Development Build to ${{ inputs.deploy_target }} by @${{ github.actor }}

# on: [push]
on:
  push:
    branches:
      - development

env:
  SERVER: development
  
  # set this to your preferred AWS region, e.g. us-west-1
  # AWS_REGION: MY_AWS_REGION
  AWS_REGION: ${{ secrets.GIT_AWS_REGION }}
  
  # set this to your Amazon ECR repository name
  # ECR_REPOSITORY: MY_ECR_REPOSITORY
  ECR_REPOSITORY: ${{ secrets.GIT_ECR_REPOSITORY }}
  
  # set this to your Amazon ECS service name
  # ECS_SERVICE: MY_ECS_SERVICE
  ECS_SERVICE: ${{ secrets.GIT_ECS_SERVICE }}
  
  # set this to your Amazon ECS cluster name
  # ECS_CLUSTER: MY_ECS_CLUSTER
  ECS_CLUSTER: ${{ secrets.GIT_ECS_CLUSTER }}
  
  # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  # ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION
  ECS_TASK_DEFINITION: ${{ secrets.GIT_ECS_TASK_DEFINITION }}
  
  # set this to the name of the container in the
  # containerDefinitions section of your task definition
  # CONTAINER_NAME: MY_CONTAINER_NAME
  CONTAINER_NAME: ${{ secrets.GIT_CONTAINER_NAME }}

jobs:
  build:
    name: Build Website
    runs-on: ubuntu-latest

    steps:
      - name: Environmental variables
        env:
          MY_VAR: Hi there! My name is
          FIRST_NAME: Mona
          MIDDLE_NAME: The
          LAST_NAME: Octocat
        run: |
          echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "14"
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      #  https://github.com/actions/cache/blob/main/examples.md#node---npm
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v3
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm i

      - name: Build Project
        run: npm run build
        
      # https://aws.amazon.com/blogs/containers/create-a-ci-cd-pipeline-for-amazon-ecs-with-github-actions-and-aws-codebuild-tests/
  
  deploy:
    name: Deploy To AWS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        id: recreate-task-definition
        run: |
          aws ecs describe-task-definition --task-definition first-run-task-definition --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true